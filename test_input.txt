% How to use:
% This file allows you to set model parameter values for multiple simulations, and collect the results. It automatically lists all primitive, String, and list type fields from your model class, as well as several key parameters (indicated by an asterisk '*') which are used for managing running and collecting data from the model.
% To assign a value to a parameter, put the desired value after the equals sign. Strings and characters will be read as is and should not be surrounded by quotation marks. Each paramter can be assigned mutliple values to run a series of simulations with different parameter values as follows:
%	parameter = 0 1 2
% If multiple parameters are each assigned multiple values, then simulations will be run for each combination of parameter values. (You can assign as many values as you want to as many parameters as you want, but be careful as the number of simulations grows quickly.)
% Parameter values can also be drawn randomly from a uniform (U - continuous, or C - discrete choices), normal (N), or gamma (G) distribution in the form:
%	parameter = U(<start>,<stop>)
%	parameter = C(<number of discrete options>)
%	parameter = N(<mean>,<standard deviation>)
%	parameter = G(<mean>,<standard deviation>,<optional minimum>)
% To collect data on a field at the model level, leave the line empty as follows:
%	result = 
% All fields that you don't want to set or collect, including key parameters, should be removed. Only key parameters can use default values (where inidcated). All model parameters must be set in the input file. All fields you want to set or collect must be made public. You can add additional parameter and result names that are not fields to handle them manually in your model class. All model-level results will be outputted in a  file named '<fname>endresults.txt' at the end of each simulation and in a file named '<fname>timeresults.txt' at set intervals throughout each simulation.
% To collect data at the agent level, use the key parameter '*agentInfo', which is automatically followed by the names of all primitive, String, and list type fields of the agent class. Keep the fields that you want to collect data on and delete those you do not want to collect data on. You can also add additional result names that are not fields to handle them manually in your model class. All agent-level results will be outputted in a file named '<fname>agentresults.txt' at set intervals throughout each simulation. If you don't want to collect any agent-level data, delete the entire *agentInfo parameter.
% To collect network data, use the key parameter '*edgeList', which is automatically followed by the names of all the Network type fields of your model class. Keep the networks that you want to get an edgelist of and delete those you do not want an edgelist of. The edgelists for each network will be outputted in files named <fname><network name>edgelist.txt at set intervals throughout each simulation. If you don't want to collect any network data, delete the entire *edgeList parameter.
% Comments (any text to be ignored when running the simulation) are indicated by the '%' character.
% Key Parameters:
*seed = 1 % random seed used for the first replicate for each combination of parameter values (incremented for each additional replicate)
*steps = 10 % number of timesteps each simulation is run for
*reps = 1 % number of simulations run for each combination of parameter values
*fname = test % beginning of the names of all output files
*testint = 1 % how often timecourse data is collected (in steps)
% Model Parameters:
gridHeight = 100
gridWidth = 100
min_distance_groups = 5
num_groups = 13
num_agents_per_group = 5
max_strikes = 3
mean_tolerance = 1.0
std_tolerance = 0.2
mean_value = 1.0
std_value = 0.2
agent_std_value = 0.1
prop_deviant = 0.2
deviant_mean_tolerance = 2.0
num_deviants = 
num_standards = 
avg_deviant_payoff = 
avg_standard_payoff = 
% Agent Parameters:
*agentInfo = group_count group_id id type num_standards_in_group num_deviants_in_group accumulated_payoff 